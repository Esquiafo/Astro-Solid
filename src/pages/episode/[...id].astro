---
import Episode from "../../components/Episode/id";
import Characters from "../../components/Characters/id";
// Limito la cantidad de Paths a buscar
export async function getStaticPaths() {
  // Llamo a la API para ver el objeto
  const response = await fetch('https://rickandmortyapi.com/api/episode');
  // Transformo en JSON para poder recorrelo
  const data = await response.json();
  // Leo toda la API y la guardo por los resultados
  const dataResults = data.results;
  // Guardo en una variable todos los ids 
  const paths = dataResults.map((episode: any) => ({ params: { id: episode.id.toString() } }));
  // Agrego uno en el caso de que sea undefined
  return [...paths,{ params: { path: undefined } }];
}

const { id } = Astro.params;


const episodeById =  async (id:any) => {
    const response = await fetch(`https://rickandmortyapi.com/api/episode/${id}`);
    const data = await response.json();
   return data
}
const apiFetch =  async (url:any) => {
    const response = await fetch(url);
    const data = await response.json();
   return data
}
const episodeAll =  async () => {
    const response = await fetch(`https://rickandmortyapi.com/api/episode/`);
    const data = await response.json();
    return data
}

---
<div>
  RUN
  {id == undefined ? (
    // remove the div with class 'flex flex-col lg:flex-row lg:flex-wrap lg:justify-center'
    // since it's duplicated below and causes a syntax error
    await episodeAll().then(data => {
      return (
        <div class="flex flex-col lg:flex-row lg:flex-wrap lg:justify-center">
          {data.results.map((episode:any) => {
            return (
              <div class="bg-white shadow-md rounded-md mx-4 my-8 lg:w-1/4">
                <Episode values={episode} client:load />
                <div class="p-4">
                  <h2 class="text-xl font-semibold mb-4">Cast:</h2>
                  <div class="flex flex-wrap justify-center">
                    {episode.characters.map(async (character:any) => {
                      const characterData = await apiFetch(character);
                      return (
                        <div class="w-1/2 p-2">
                          <Characters values={characterData} client:load />
                        </div>
                      )
                    })}
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )
    }).catch(err => console.error(err))
  ) : (
  <div>
    {await episodeById(id).then( data =>{
return(
<div class="bg-gray-200 overflow-x-hidden">
  <div class="bg-white shadow-md rounded-md w-screen">
    <Episode values={data} />
    <div class="p-4">
      <h2 class="text-xl font-semibold mb-4">Cast:</h2>
      <div class="flex flex-wrap justify-center">
        {data.characters.map(async (character:any) => {
          const characterData = await apiFetch(character);
          return (
            <div class="lg:w-1/4 md:w-1/2 w-full p-3">
              <Characters values={characterData} />
            </div>
          )
        })}
      </div>
    </div>
  </div>
</div>


)
}
).catch(err => console.error(err))}  
  </div>
)}
</div>